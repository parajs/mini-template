{"version":3,"sources":["index.js","listeners.js","life-cycle.js","configuration.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar listeners_1 = require(\"./listeners\");\r\nexports.Listeners = listeners_1.Listeners;\r\nvar life_cycle_1 = require(\"./life-cycle\");\r\nexports.LifeCycle = life_cycle_1.LifeCycle;\r\nvar miniprogram_cancel_token_1 = require(\"miniprogram-cancel-token\");\r\nexports.CancelToken = miniprogram_cancel_token_1.CancelToken;\r\n//# sourceMappingURL=index.js.map","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * 监听事件列表\r\n */\r\nvar Listeners = /** @class */ (function () {\r\n    function Listeners() {\r\n        /**\r\n         * 发送之前事件监听列表\r\n         * 回调函数参数为`完整配置`(只读,不应修改)\r\n         */\r\n        this.onSend = [];\r\n        /**\r\n         * 收到数据响应后事件监听列表\r\n         * 回调函数参数为`返回结果`和`完整配置`(只读,不应修改)\r\n         */\r\n        this.onResponse = [];\r\n        /**\r\n         * 请求完成时事件监听列表\r\n         * 回调函数参数为`操作结果`和`完整配置`(只读,不应修改)\r\n         */\r\n        this.onComplete = [];\r\n        /**\r\n         * 处理失败事件监听列表\r\n         * 回调函数参数为`失败原因`和`完整配置`(只读,不应修改)\r\n         */\r\n        this.onRejected = [];\r\n        /**\r\n         * 请求取消事件监听列表\r\n         * 回调函数参数为`取消原因`和`完整配置`(只读,不应修改)\r\n         */\r\n        this.onAbort = [];\r\n    }\r\n    return Listeners;\r\n}());\r\nexports.Listeners = Listeners;\r\n//# sourceMappingURL=listeners.js.map","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar configuration_1 = require(\"./configuration\");\r\nvar listeners_1 = require(\"./listeners\");\r\n/**\r\n * 在结果中主人timeout 标记\r\n * @param res 原始结果\r\n */\r\nfunction timeoutMsg(res, time) {\r\n    res.errMsg = res.errMsg ? res.errMsg.replace(':fail abort', \":fail timeout \" + time) : \"network::fail timeout \" + time;\r\n    res.timeout = true;\r\n    return res;\r\n}\r\n/**\r\n * 网络请求的完整生命周期\r\n * @template TWxOptions 微信操作函数参数类型 // 微信操作函数\r\n * @template TWxTask 微信操作函数返回值类型 // 微信操作的任务类型\r\n * @template TInitConfig LifeCycle的初始默认配置项(Defaults)类型 //初始化配置项\r\n * @template TFullOptions 一个操作完整配置项(全部可接收参数)类型\r\n */\r\nvar LifeCycle = /** @class */ (function () {\r\n    /**\r\n     * 新建实列\r\n     * @param operator 操作\r\n     * @param config 全局默认配置\r\n     * @param listeners 事件监听\r\n     */\r\n    function LifeCycle(operator, config, listeners) {\r\n        if (listeners === void 0) { listeners = new listeners_1.Listeners(); }\r\n        this.handle = operator;\r\n        this.Defaults = config;\r\n        this.Listeners = listeners;\r\n        if (config.retry === undefined) {\r\n            this.Defaults.retry = 1;\r\n        }\r\n        if (!config.headers) {\r\n            this.Defaults.headers = {};\r\n        }\r\n    }\r\n    /**\r\n     * 处理请求\r\n     * @param options - 请求参数,不包括默认参数\r\n     */\r\n    LifeCycle.prototype.process = function (options) {\r\n        var _this = this;\r\n        // tslint:disable-next-line: no-parameter-reassignment\r\n        options = configuration_1.mergeConfig(options, this.Defaults);\r\n        return this._onSend(options)\r\n            .then(function (param) {\r\n            // 记录发送时间戳\r\n            if (options.timestamp) {\r\n                if (typeof options.timestamp === 'object') {\r\n                    // 记录于传入的参数中\r\n                    options.timestamp.send = Date.now();\r\n                }\r\n                else {\r\n                    options.__sendTime = Date.now();\r\n                }\r\n            }\r\n            return _this._send(param, options);\r\n        });\r\n    };\r\n    /**\r\n     * 请求发送之前处理数据\r\n     * @param options - 完整参数\r\n     */\r\n    LifeCycle.prototype._onSend = function (options) {\r\n        this.Listeners.onSend.forEach(function (f) { f(options); });\r\n        return Promise.resolve(options)\r\n            .then(options.transformSend);\r\n    };\r\n    /**\r\n     * 发送网络请求,并自动重试\r\n     * @param data - 发送微信参数\r\n     * @param options - 全部配置\r\n     */\r\n    LifeCycle.prototype._send = function (data, options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            /**\r\n             * 是否结束\r\n             */\r\n            var completed = false;\r\n            /**\r\n             * 超时定时器\r\n             * * undefined 表示未启用\r\n             * * 0 表示已经触发超时\r\n             * * 正数 表示真在计时中(未超时)\r\n             */\r\n            var timeoutHandle;\r\n            var cancelToken = options.cancelToken;\r\n            if (cancelToken) {\r\n                cancelToken.throwIfRequested();\r\n            }\r\n            data.success = function (res) {\r\n                completed = true;\r\n                _this._response(res, options)\r\n                    .then(resolve, reject);\r\n            };\r\n            // retry on fail\r\n            data.fail = function (res) {\r\n                if (timeoutHandle === 0) {\r\n                    timeoutMsg(res, options.timeout); // 触发自定义超时,注入timeout\r\n                }\r\n                if (cancelToken && cancelToken.isCancelled()) {\r\n                    // 用户主动取消,直接结束不再重试\r\n                    res.cancel = true;\r\n                }\r\n                else if (typeof options.retry === 'function') {\r\n                    // 自定义retry 函数\r\n                    Promise.resolve()\r\n                        .then(function () { return options.retry(data, res); })\r\n                        .then(\r\n                    // 继续重试\r\n                    function (retryData) {\r\n                        _this._send(retryData, options)\r\n                            .then(resolve, reject);\r\n                    }, \r\n                    // 放弃重试\r\n                    function (reason) {\r\n                        _this._onFail(reason, options)\r\n                            .then(reject, reject);\r\n                        _this._complete(reason, options);\r\n                    });\r\n                    return;\r\n                }\r\n                else if (options.retry-- > 0) {\r\n                    // 还有重试次数\r\n                    _this._send(data, options)\r\n                        .then(resolve, reject);\r\n                    return;\r\n                }\r\n                // 结束请求\r\n                completed = true;\r\n                _this._onFail(res, options)\r\n                    .then(reject, reject);\r\n            };\r\n            data.complete = function (res) {\r\n                if (timeoutHandle) {\r\n                    // 清理计时器\r\n                    clearTimeout(timeoutHandle);\r\n                    timeoutHandle = undefined; // 置空\r\n                }\r\n                else if (timeoutHandle === 0 && !res.timeout) {\r\n                    // 触发过自定义超时,并且尚未注入timeout\r\n                    timeoutMsg(res, options.timeout);\r\n                }\r\n                if (completed) {\r\n                    // 结束\r\n                    _this._complete(res, options);\r\n                }\r\n            };\r\n            var task = _this.handle(data);\r\n            if (options.timeout > 0) {\r\n                // 计时器 自定义超时\r\n                // 超时触发 计时器标志置0, 终止操作\r\n                timeoutHandle = setTimeout(function () { timeoutHandle = 0; task.abort(); }, options.timeout);\r\n            }\r\n            if (options.onHeadersReceived) {\r\n                task.onHeadersReceived(options.onHeadersReceived); // 响应头回调\r\n            }\r\n            if (options.onProgressUpdate && task.onProgressUpdate) {\r\n                task.onProgressUpdate(options.onProgressUpdate); // 进度回调\r\n            }\r\n            if (cancelToken) {\r\n                cancelToken.promise\r\n                    .then(function (reason) { task.abort(); _this._onAbort(reason, options); }, reject);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * 处理服务器返回数据\r\n     * @param res - 返回参数\r\n     * @param options - 全部配置\r\n     */\r\n    LifeCycle.prototype._response = function (res, options) {\r\n        var _this = this;\r\n        this.Listeners.onResponse.forEach(function (f) { f(res, options); });\r\n        if (options.transformResponse) {\r\n            return Promise\r\n                .resolve(res)\r\n                .then(\r\n            // tslint:disable-next-line: no-unsafe-any\r\n            function (result) { return options.transformResponse(result, options); })\r\n                .catch(function (reason) { return _this._onFail(reason, options); });\r\n        }\r\n        else {\r\n            return Promise.resolve(res);\r\n        }\r\n    };\r\n    /**\r\n     * complete 结束操作 按需注入时间\r\n     * @param res - result\r\n     * @param options - all options\r\n     */\r\n    LifeCycle.prototype._complete = function (res, options) {\r\n        if (options.timestamp) {\r\n            //记录时间戳\r\n            if (typeof options.timestamp === 'object') {\r\n                options.timestamp.response = Date.now();\r\n                res.time = options.timestamp;\r\n            }\r\n            else {\r\n                res.time = {\r\n                    send: options.__sendTime,\r\n                    response: Date.now()\r\n                };\r\n            }\r\n        }\r\n        this._onComplete(res, options);\r\n    };\r\n    /**\r\n     * 请求发送失败\r\n     * @param res - 返回参数\r\n     * @param options - 全部配置\r\n     */\r\n    LifeCycle.prototype._onFail = function (res, options) {\r\n        this.Listeners.onRejected.forEach(function (f) { f(res, options); });\r\n        return Promise.reject(res);\r\n    };\r\n    /**\r\n     * 请求完成\r\n     * @param res - 返回参数\r\n     * @param options - 全部配置\r\n     */\r\n    LifeCycle.prototype._onComplete = function (res, options) {\r\n        this.Listeners.onComplete.forEach(function (f) { f(res, options); });\r\n    };\r\n    /**\r\n     * 请求完成\r\n     * @param res - 返回参数\r\n     * @param options - 全部配置\r\n     */\r\n    LifeCycle.prototype._onAbort = function (reason, options) {\r\n        // tslint:disable-next-line: no-unsafe-any\r\n        this.Listeners.onAbort.forEach(function (f) { f(reason, options); });\r\n    };\r\n    return LifeCycle;\r\n}());\r\nexports.LifeCycle = LifeCycle;\r\n//# sourceMappingURL=life-cycle.js.map","\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * 合并配置\r\n * @param customize 自定义配置，未定义的将被设置为默认值\r\n * @param defaults 默认值\r\n */\r\nfunction mergeConfig(customize, defaults) {\r\n    var config = __assign({}, defaults, customize);\r\n    if (defaults.headers && customize.headers) {\r\n        // 合并headers\r\n        config.headers = __assign({}, defaults.headers, customize.headers);\r\n    }\r\n    return config;\r\n}\r\nexports.mergeConfig = mergeConfig;\r\n//# sourceMappingURL=configuration.js.map"]}