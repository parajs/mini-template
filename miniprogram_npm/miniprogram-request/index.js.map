{"version":3,"sources":["index.js","http.js","transform.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar http_1 = require(\"./http\");\r\nvar miniprogram_network_life_cycle_1 = require(\"miniprogram-network-life-cycle\");\r\nexports.CancelToken = miniprogram_network_life_cycle_1.CancelToken;\r\nvar http_2 = require(\"./http\");\r\nexports.Http = http_2.Http;\r\nvar transform_1 = require(\"./transform\");\r\nexports.transformRequestResponseOkData = transform_1.transformRequestResponseOkData;\r\nexports.transformRequestSendDefault = transform_1.transformRequestSendDefault;\r\n/**\r\n * 预定义全局 REQUEST 对象\r\n */\r\n// tslint:disable-next-line: export-name\r\nexports.REQUEST = new http_1.Http();\r\n//# sourceMappingURL=index.js.map","\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar miniprogram_network_life_cycle_1 = require(\"miniprogram-network-life-cycle\");\r\nvar transform_1 = require(\"./transform\");\r\n/**\r\n * 小程序HTTP 请求生命周期封装\r\n * @example\r\n *    `const http = new Http({ baseURL: 'https://api.newfuture.cc/', retry: 3 });`\r\n * @template TExt 扩展参数属性类型\r\n */\r\nvar Http = /** @class */ (function (_super) {\r\n    __extends(Http, _super);\r\n    /**\r\n     * 新建 Http实列\r\n     * @param config 全局默认配置\r\n     * @param request 请求处理方法，默认使用请求队列处理\r\n     * @param listeners 请求事件监听\r\n     */\r\n    function Http(config, request, listeners) {\r\n        return _super.call(this, \r\n        // tslint:disable-next-line: no-use-before-declare\r\n        request || wx.request, \r\n        // tslint:disable-next-line: no-object-literal-type-assertion\r\n        config || { transformSend: transform_1.transformRequestSendDefault }, listeners) || this;\r\n    }\r\n    Http.prototype.request = function () {\r\n        var argNum = arguments.length;\r\n        // tslint:disable-next-line: no-unsafe-any\r\n        var options = argNum === 1 ? arguments[0] : (arguments[3] || {});\r\n        if (argNum > 1) {\r\n            options.method = arguments[0];\r\n            options.url = arguments[1];\r\n            if (argNum > 2) {\r\n                // tslint:disable-next-line: no-unsafe-any\r\n                options.data = arguments[2];\r\n            }\r\n        }\r\n        return this.process(options);\r\n    };\r\n    /**\r\n     * GET 操作\r\n     * @param action 请求操作URL,支持{name}格式参数\r\n     * @param data 可转为query string\r\n     * @param config 可覆盖默认配置\r\n     * @template TReturn Promise 返回的格式类型,默认返回微信原始返回数据格式\r\n     * @template TData get query data请求参数的格式类型,默认 any\r\n     * @template TParams 路径参数(如`/items/{id}`或者`/{0}/{1}`)的格式类型,默认 任意object或数组\r\n     */\r\n    // tslint:disable-next-line: no-reserved-keywords\r\n    Http.prototype.get = function (action, data, config) {\r\n        return this.request('GET', action, data, config);\r\n    };\r\n    /**\r\n     * POST 操作\r\n     * @param action 请求操作URL,支持{name}格式参数\r\n     * @param data 操作数据,默认会以json方式上传\r\n     * @param config 可覆盖默认配置\r\n     * @template TReturn Promise 返回的格式类型,默认返回微信原始返回数据格式\r\n     * @template TData post data参数格式类型,默认 any\r\n     * @template TParams 路径参数(如`/items/{id}`或者`/{0}/{1}`)的格式类型,默认 任意object或数组\r\n     */\r\n    Http.prototype.post = function (action, data, config) {\r\n        return this.request('POST', action, data, config);\r\n    };\r\n    /**\r\n     * PUT 操作\r\n     * @param action 请求操作URL,支持{name}格式参数\r\n     * @param data 操作数据,默认会以json方式上传\r\n     * @param config 可覆盖默认配置\r\n     * @template TReturn Promise 返回的格式类型,默认返回微信原始返回数据格式\r\n     * @template TData post data数据格式类型,默认 any\r\n     * @template TParams 路径参数(如`/items/{id}`或者`/{0}/{1}`)的格式类型,默认 任意object或数组\r\n     */\r\n    Http.prototype.put = function (action, data, config) {\r\n        return this.request('PUT', action, data, config);\r\n    };\r\n    /**\r\n     * DELETE 操作\r\n     * @param action 请求操作URL,支持{name}格式参数\r\n     * @param data 可转为query string\r\n     * @param config 可覆盖默认配置\r\n     * @template TReturn Promise 返回的格式类型,默认返回微信原始返回数据格式\r\n     * @template TData put query data参数格式类型,默认 any\r\n     * @template TParams 路径参数(如`/items/{id}`或者`/{0}/{1}`)的格式类型,默认 任意object或数组\r\n     */\r\n    // tslint:disable-next-line: no-reserved-keywords\r\n    Http.prototype.delete = function (action, data, config) {\r\n        return this.request('DELETE', action, data, config);\r\n    };\r\n    /**\r\n     * HEAD 操作\r\n     * @param action 请求操作URL,支持{name}格式参数\r\n     * @param data 可转为query string\r\n     * @param config 可覆盖默认配置\r\n     * @template TReturn Promise 返回的格式类型,默认返回微信原始返回数据格式\r\n     * @template TData head query data参数格式类型,默认 any\r\n     * @template TParams 路径参数(如`/items/{id}`或者`/{0}/{1}`)的格式类型,默认 任意object或数组\r\n     */\r\n    Http.prototype.head = function (action, data, config) {\r\n        return this.request('HEAD', action, data, config);\r\n    };\r\n    /**\r\n     * Patch 操作\r\n     * 由于小程序不支持PATCH 方法\r\n     * 采用X-HTTP-Method-Override兼容处理，需要服务器端支持\r\n     * @param action 请求操作URL,支持{name}格式参数\r\n     * @param data 操作数据,默认会以json方式上传\r\n     * @param config 可覆盖默认配置\r\n     * @template TReturn Promise 返回的格式类型,默认返回微信原始返回数据格式\r\n     * @template TData patch data参数格式类型,默认 any\r\n     * @template TParams 路径参数(如`/items/{id}`或者`/{0}/{1}`)的格式类型,默认 任意object或数组\r\n     */\r\n    Http.prototype.patch = function (action, data, config) {\r\n        if (!config) {\r\n            // tslint:disable-next-line: no-parameter-reassignment\r\n            config = {\r\n                headers: { 'X-HTTP-Method-Override': 'PATCH' }\r\n            };\r\n        }\r\n        else if (!config.headers) {\r\n            config.headers = { 'X-HTTP-Method-Override': 'PATCH' };\r\n        }\r\n        else {\r\n            config.headers['X-HTTP-Method-Override'] = 'PATCH';\r\n        }\r\n        return this.request('POST', action, data, config);\r\n    };\r\n    return Http;\r\n}(miniprogram_network_life_cycle_1.LifeCycle));\r\nexports.Http = Http;\r\n//# sourceMappingURL=http.js.map","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// import { RequestData, RequestOptions } from './configuration';\r\nvar miniprogram_network_utils_1 = require(\"miniprogram-network-utils\");\r\n/**\r\n * 构建请求参数\r\n * @param data - 完整配置参数\r\n */\r\nfunction transformRequestSendDefault(data) {\r\n    var wxParam = {\r\n        url: miniprogram_network_utils_1.buildParams(data.url, data.params, data.baseURL),\r\n        header: data.headers\r\n    };\r\n    if (data.responseType === 'arraybuffer') {\r\n        wxParam.responseType = 'arraybuffer';\r\n    }\r\n    else if (data.responseType === 'json') {\r\n        wxParam.dataType = 'json';\r\n    }\r\n    return miniprogram_network_utils_1.getCommonOptions(wxParam, data, ['data', 'method']);\r\n}\r\nexports.transformRequestSendDefault = transformRequestSendDefault;\r\n/**\r\n * 返回请求成功的响应数据data部分\r\n * statusCode 2xx 操作成功仅返回data数据\r\n * 否则抛出错误(rejected)\r\n * @param res - 返回结果\r\n * @param config - 完整配置参数\r\n */\r\nfunction transformRequestResponseOkData(res, config) {\r\n    if (res.statusCode >= 200 && res.statusCode < 300) {\r\n        return res.data;\r\n    }\r\n    throw res;\r\n}\r\nexports.transformRequestResponseOkData = transformRequestResponseOkData;\r\n//# sourceMappingURL=transform.js.map"]}